type KVData @jsonField {
  key: String
  value: String
  type: String
}

type Block @entity {
  id: ID!
  number: BigInt
  timestamp: Date
  parentHash: String
  specVersion: String
  stateRoot: String
  extrinsicRoot: String
  extrinsics: [Extrinsic] @derivedFrom(field: "block")
  events: [Event] @derivedFrom(field: "block")
}

type Extrinsic @entity {
  id: ID!
  method: String
  section: String
  args: [KVData]
  signer: Account
  nonce: BigInt
  timestamp: Date
  signature: String
  tip: String
  isSigned: Boolean
  isSuccess: Boolean
  block: Block
  events: [Event] @derivedFrom(field: "extrinsic")
  calls: [Call] @derivedFrom(field: "extrinsic")
}

type Call @entity {
  id: ID!
  section: String
  method: String
  args: [KVData]
  timestamp: Date
  isSuccess: Boolean
  signer: Account
  extrinsic: Extrinsic
  parentCall: Call
  calls: [Call] @derivedFrom(field: "parentCall")
}

type Event @entity {
  id: ID!
  index: Int
  section: String
  method: String
  data: [KVData]
  timestamp: Date
  blockNumber: BigInt
  block: Block
  extrinsic: Extrinsic
}

type Account @entity {
  id: ID!
  txCount: BigInt
  createAtBlock: Block
  extrinsics: [Extrinsic] @derivedFrom(field: "signer")
  calls: [Call] @derivedFrom(field: "signer")
}

type Profile @entity {
  id: ID! # Call ID
  method: String
  callIndex: String
  blockNumber: BigInt
  submitter: String
  signature: String
  creator: Account! # AccountId that created the profile
  profileData: [KVData] # Key-value pairs from ProfileData storage
}

type ProfileKeyRotation @entity {
  id: ID! # Call ID + block number
  method: String
  callIndex: String
  blockNumber: BigInt
  submitter: String
  signature: String
  oldKey: Account! # Original AccountId
  newKey: Account! # New AccountId
}
